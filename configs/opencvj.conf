{
	config_variables: {
		data_home: "${config_dir}/../data",
		cp_param_home: "${config_dir}/cp_params",
		maze_home: "${data_home}/maze"
	},

	highgui: {
	   type: "highgui",
	   device_index: 0,
	   image_size: [1280, 720],
	   capture_interval: "20ms"
	},

	highgui2: {
	   type: "highgui",
	   device_index: 0,
	   image_size: [640, 480]
	},

	highgui_320_240: {
	   type: "highgui",
	   device_index: 0,
	   image_size: [320, 240]
	},

	xtion: {
		type: "openni2",
		color: {
			type: "openni2_color",
			image_size: [640, 480],
			capture_interval: "20ms"
		},
		depth: {
			type: "openni2_depth",
			image_size: [640, 480],
			capture_interval: "20ms"
		},
		frame_sync: true,
		image_registration: true
	},

	pcsdk: {
		type: "pcsdk",
		color: {
			type: "pcsdk_color",
			image_size: [640, 480]
		},
		depth: {
			type: "pcsdk_depth",
			image_size: [320, 240]
		}
	},

	color_bgmodel: {
		type: "mvavg_color",
		update_rate: 0.03,

		intensity_threshold: 50
	},

	depth_bgmodel: {
		type: "mvavg_depth",
		update_rate: 0.03
	},

	projector: {
		monitor_index: 1
	},

	mock_projector: {
		window_name: "projector",
		size: [1280, 720]
	},

	marker: {
		threshold: {
			type: "adaptive",
			block_size: 51
		},
		invert: false
	},

	highgui_projector_calib: {
		sample_count: 10,
		calibration_timeout: "5s",
		flip_code: "both",
		checker_board: {
			pattern_size: [8, 6],
			cell_length: 25,
			image_filepath: "${config_dir}/checker_board/CheckerBoard(8x6).jpg"
		},
		init_calibration: true,
		parameter_filepath: "${cp_param_home}/highgui_projector_parameter.json",
		debug_window_name: "calibration"
	},

	xtion_projector_calib: {
		sample_count: 10,
		calibration_timeout: "3s",
		flip_code: "both",
		checker_board: {
			pattern_size: [8, 6],
			cell_length: 25,
			image_filepath: "${config_dir}/checker_board/CheckerBoard(8x6).jpg"
		},
		init_calibration: true,
		parameter_filepath: "${cp_param_home}/xtion_projector_parameter.json",
		debug_window_name: "calibration"
	},

	mouse: {
		flip_code: "both",
		fingertip: {
			hand : {
				type: "mvavg_depth",
				update_rate: 0.03,
				valid_depth: [1, 1000],
				bg_depth_delta: { high: 9 },
				size: { low: 1000 }
			},
			tip: {
				depth_delta: [7, 23],
				size: [65, 350],
				roundness: 0.27
			}
		},
		point_tracker: {
			type: "mvavg",
			alpha: 0.4,
//			detect_ignore_count: 2,
			detect_ignore_count: 5,
			lost_ignore_count: 4,
			lost_ignore_millis: 500,
			spike_distance: 150,
			spike_ignore_count: 4
		},
		background_learning: {
			period: "3s",
			winname: "background"
		},
//		error_correction_offset: [-12,-11]
		error_correction_offset: [-20,-11],
		EOF: { }
	},

	board_tracker: {
		board: {
			threshold: {
				type: "adaptive",
				block_size: 131
			}
		},
		type: "mvavg",
		alpha: 0.5,
		detect_ignore_count: 1,
		lost_ignore_count: 4,
		lost_ignore_millis: 500,
		spike_distance: 150,
		spike_ignore_count: 4
	},

	stable_depth_scene_detector: {
		scene_detector: {
			scene: {
				type: "mvavg_depth",
				update_rate: 0.2,
				valid_depth: [1, 1000],
				bg_depth_delta: [-8, 8 ],
				size: { low: 500 }
			},
			judge_timeout: "500ms"
		},
		stable_scene: {
			morph_action: "none",
			delta_threshold: 7,
			delta_size: { low: 250 }
		}
	},

	stable_foreground_depth_scene_detector: {
		scene_detector: {
			scene: {
				type: "mvavg_depth",
				update_rate: 0.2,
				valid_depth: [1, 1000],
				bg_depth_delta: [-8, 8 ],
				size: { low: 500 }
			},
			judge_timeout: "500ms"
		},
		foreground : {
			type: "mvavg_depth",
			update_rate: 0.03,
			valid_depth: [1, 1000],
			bg_depth_delta: { high: 9 },
			size: { low: 1000 }
		}
	},

	stable_color_scene_detector: {
		scene_detector: {
			scene: {
				type: "mvavg_color",
				update_rate: 0.05,
				intensity_threshold: 50,
				size: { low: 500 }
			},
			judge_timeout: "1s"
		},
		stable_scene: {
			morph_action: "open",
			delta_threshold: 50,
			delta_size: { low: 300 }
		}
	},

	maze: {
		maze_dir: "${maze_home}",
		maze_template: {
			db: "${maze_home}/maze_features.db",
			feature: "sift",
			descriptor: "sift",
			matcher: "flann-based",
			max_keypoint_distance: 300,
			definite_match_store: 0.5,
			match_score: 0.25,
			ransac_match_score: 0.2
		},
		tracker: {
			temp_lost_timeout: "2s"
		}
	},

	tabletop_monitor: {
		scene_detector: {
			scene: {
				type: "mvavg_depth",
				update_rate: 0.1,
				valid_depth: [1, 1000],
				bg_depth_delta: [-8, 8 ],
				size: { low: 500 }
			},
			judge_timeout: "1s"
		},
		stable_scene: {
			morph_action: "open",
			delta_threshold: 15,
			delta_size: { low: 650 }
		},
		marker: {	// 테이블 위 기기 인식을 위한 마커 인식기 설정 정보
			threshold: {
				type: "adaptive",
				block_size: 51
			},
			invert: true
		},
		// 테이블 위에 있는 기기에 마커를 띄워놓게 하고, 이를 인식하는 최대기간
		// 이 기간이 지나도록 마커가 인식되지 않으면, 해당 기기는 테이블 위에 없다고 가정한다.
		device_identify_timeout: "3s"
	},

	multi_fingertips: {
		flip_code: "both",
		fingertips: {
			hand : {
				type: "mvavg_depth",
				update_rate: 0.03,
				valid_depth: [1, 1000],
				bg_depth_delta: { high:9 },
				size: { low: 1000 }
			},
			tip: {
				depth_delta: [7, 23],
				size: [65, 350],
				roundness: 0.27
			}
		},
		tracker: {
			type: "mvavg",
			alpha: 0.4,
			detect_ignore_count: 2,
			lost_ignore_count: 4,
			lost_ignore_millis: 500,
			spike_distance: 150,
			spike_ignore_count: 4
		},
		background_learning: {
			period: "3s",
			winname: "background"
		},
		EOF: { }
	},

	camshift: {
		bin_count: 64,
		morph_action: "close",
		size: [100, 262144]
	},

	hue_camshift_track: {
		backproject: {
			type: "hue",
			nbins: 64
		},
		prob_threshold: 0.9,
		filter: {
			size: { low: 1000 }
		}
	},

	depth_camshift_track: {
		backproject: {
			type: "depth_delta",
			bgmodel: "depth_bgmodel",
			valid_depth: [1, 1000],
			bg_depth_delta: { high:5 },
			nbins: 64,
			range: [10, 500]
		},
		prob_threshold: 0.8,
		filter: {
			size: { low: 1000 }
		}
	},

	EOF: { }
}