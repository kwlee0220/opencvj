apply plugin: 'java'
apply plugin: 'maven'

group = 'etri'
version = '1.0'
ext.opencv_version = '2411'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

ext.opencv_version = '2411'
dependencies {
	compile project(':utils')
	compile project(":event")
	compile project(":async")
	compile project(':planet')
	compile project(':camus.model')
	compile project(':etri.services')
	
	compile fileTree(dir: 'lib', include: "opencv-${opencv_version}.jar")
	compile "com.google.inject:guice:4.1.0"
	
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}